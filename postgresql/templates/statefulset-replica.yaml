{{- if gt (.Values.replicaCount | int) 1 }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-replica
  namespace: sellio-infra
  labels:
    app.kubernetes.io/name: postgresql
    role: read
spec:
  serviceName: postgresql-read
  replicas: {{ sub .Values.replicaCount 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      role: read
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        role: read
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      topologySpreadConstraints:
        {{- toYaml .Values.topologySpreadConstraints | nindent 8 }}
      containers:
        - name: postgresql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRESQL_REPLICATION_MODE
              value: "slave"
            - name: POSTGRESQL_REPLICATION_USER
              value: "repl_user"
            - name: POSTGRESQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: replication-password
            - name: POSTGRESQL_MASTER_HOST
              value: "postgresql-primary"
            - name: POSTGRESQL_MASTER_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgres-password
          livenessProbe:
            exec:
              command: ["/bin/sh","-c","pg_isready -U postgres"]
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["/bin/sh","-c","pg_isready -U postgres"]
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}


