{{- $initEnabled := true -}}
{{- with .Values.initdb -}}
{{-   $initEnabled = (default true .enabled) -}}
{{- end -}}
{{- if $initEnabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: postgresql-initdb
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: initdb
          image: postgres:16-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: PGADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgres-password
          command:
            - /bin/sh
            - -ec
            - |
              set -euo pipefail
              apk add --no-cache gettext >/dev/null 2>&1 || true
              export PGPASSWORD="${PGADMIN_PASSWORD}"
              export MAIN_PASS="$(cat /secrets/user-main-password)"
              export CART_PASS="$(cat /secrets/user-cart-password)"
              export NOTIF_PASS="$(cat /secrets/user-notifications-password)"
              mkdir -p /work
              envsubst < /sql/01_init_databases.sql > /work/init.sql

              # Create roles and set passwords
              psql -h postgresql-primary -U postgres -d postgres -v ON_ERROR_STOP=1 -f /work/init.sql

              # Create databases if not exist and set owners
              if ! psql -h postgresql-primary -U postgres -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='main'" | grep -q 1; then
                psql -h postgresql-primary -U postgres -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE main OWNER user_main";
              fi
              if ! psql -h postgresql-primary -U postgres -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='cart'" | grep -q 1; then
                psql -h postgresql-primary -U postgres -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE cart OWNER user_cart";
              fi
              if ! psql -h postgresql-primary -U postgres -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='notifications'" | grep -q 1; then
                psql -h postgresql-primary -U postgres -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE notifications OWNER user_notifications";
              fi

              # Apply per-DB schema privileges (idempotent)
              psql -h postgresql-primary -U postgres -d main -v ON_ERROR_STOP=1 -c "REVOKE CREATE ON SCHEMA public FROM PUBLIC; GRANT ALL ON SCHEMA public TO user_main;" || true
              psql -h postgresql-primary -U postgres -d cart -v ON_ERROR_STOP=1 -c "REVOKE CREATE ON SCHEMA public FROM PUBLIC; GRANT ALL ON SCHEMA public TO user_cart;" || true
              psql -h postgresql-primary -U postgres -d notifications -v ON_ERROR_STOP=1 -c "REVOKE CREATE ON SCHEMA public FROM PUBLIC; GRANT ALL ON SCHEMA public TO user_notifications;" || true
          volumeMounts:
            - name: sql
              mountPath: /sql
            - name: admin
              mountPath: /admin
            - name: appusers
              mountPath: /secrets
      volumes:
        - name: sql
          configMap:
            name: postgresql-initdb
        - name: admin
          secret:
            secretName: postgresql
        - name: appusers
          secret:
            secretName: postgresql-app-users
{{- end }}


